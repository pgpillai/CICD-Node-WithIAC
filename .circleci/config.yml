version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # aws s3 rm s3://udacicd-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udacicd-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udacicd-backend-<< parameters.workflow_id >>
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm i
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical >/tmp/artifact-fe
      - store_artifacts:
          path: /tmp/artifact-fe

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical >/tmp/artifact-be
      - store_artifacts:
          path: /tmp/artifact-be

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacicd \
              --stack-name "udacicd-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
            echo "${CIRCLE_WORKFLOW_ID}"
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacicd \
              --stack-name "udacicd-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text | tee /tmp/backendip >> .circleci/ansible/inventory.txt
            yum install -y tar
            yum install -y gzip
            echo "$(cat /tmp/backendip)"
            curl -H "Content-Type: text/plain" -H "token: 2cb4218b-268e-4d12-b072-c572a3d05720" --request PUT --data "$(cat /tmp/backendip)" https://api.memstash.io/values/BACKEND_IP
            #echo "$(cat /tmp/backendip)" >> .circleci/ansible/inventory.txt
            echo "$PWD"
            echo "$(cat .circleci/ansible/inventory.txt)"
            # exit 1
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      
      # Here's where you will add some code to rollback on failure    
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"


  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "7a:82:1e:30:15:3f:cb:c0:0f:ae:b5:72:61:a6:30:35"
      - attach_workspace:
          at:  .

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            echo "$(cat .circleci/ansible/inventory.txt)"
            
          
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
            #exit 1
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm i
            npm run migrations >/tmp/migration.log
          no_output_timeout: 30m
      - run:
          name: Send migration results to memstash
          command: |
            cd /tmp/
            if grep -i "has been executed successfully" migration.log
            then
            curl -H "Content-Type: text/plain" -H "token: 2cb4218b-268e-4d12-b072-c572a3d05720" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
            exit 1
            
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
          
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=curl -H "token: 2cb4218b-268e-4d12-b072-c572a3d05720" --request GET https://api.memstash.io/values/BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "7a:82:1e:30:15:3f:cb:c0:0f:ae:b5:72:61:a6:30:35"
      - attach_workspace:
          at:  .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
      # Lightweight Docker image 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=curl -H "token: 2cb4218b-268e-4d12-b072-c572a3d05720" --request GET https://api.memstash.io/values/BACKEND_IP
            BE_URL="https://${BACKEND_IP}/api/status"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            if curl -s --head "${BE_URL}" 
            then
            echo "it worked"
            else
            echo " it didnt worked"
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            returl 1
            else
            return 0
            fi
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              #only: [test-feature-branch]
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]